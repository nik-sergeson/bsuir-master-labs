from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPooling2D, Dropout, Flatten, Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import RMSprop


def get_bounding_box_detection_model(path_to_weights):
    num_channels = 1
    img_size = 100
    chanDim = -1
    kernel_size = (3, 3)
    box_detection_model = Sequential()
    box_detection_model.add(Conv2D(32, kernel_size=kernel_size, activation='relu', padding='same',
                                   input_shape=(img_size, img_size, num_channels)))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(32, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(64, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(64, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(128, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(128, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Conv2D(196, kernel_size=kernel_size, activation='relu', padding='same'))
    box_detection_model.add(BatchNormalization(axis=chanDim))
    box_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Flatten())
    box_detection_model.add(Dense(1024, activation='relu'))
    box_detection_model.add(BatchNormalization())
    box_detection_model.add(Dropout(0.25))
    box_detection_model.add(Dense(1024, activation='relu'))
    box_detection_model.add(Dense(4))
    box_detection_model.compile(optimizer='RMSprop', loss='mse')
    box_detection_model.load_weights(path_to_weights)
    return box_detection_model


def get_image_detection_model(path_to_weights):
    num_classes = 10
    num_channels = 1
    img_size = 54
    chanDim = -1
    image_detection_model = Sequential()
    image_detection_model.add(Conv2D(32, kernel_size=(5, 5), activation='relu', padding='same',
                                     input_shape=(img_size, img_size, num_channels)))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    image_detection_model.add(Conv2D(32, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    image_detection_model.add(Dropout(0.25))
    image_detection_model.add(Conv2D(64, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    image_detection_model.add(Conv2D(64, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    image_detection_model.add(Dropout(0.25))
    image_detection_model.add(Conv2D(128, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    image_detection_model.add(Conv2D(128, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    image_detection_model.add(Dropout(0.25))
    image_detection_model.add(Conv2D(196, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))
    image_detection_model.add(Conv2D(196, kernel_size=(5, 5), activation='relu', padding='same'))
    image_detection_model.add(BatchNormalization(axis=chanDim))
    image_detection_model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    image_detection_model.add(Dropout(0.25))
    image_detection_model.add(Flatten())
    image_detection_model.add(Dense(512, activation='relu'))
    image_detection_model.add(BatchNormalization())
    image_detection_model.add(Dropout(0.5))
    image_detection_model.add(Dense(512, activation='relu'))
    image_detection_model.add(Dense(num_classes, activation='sigmoid'))
    image_detection_model.compile(optimizer=RMSprop(lr=0.0001, decay=1e-6), loss='binary_crossentropy')
    image_detection_model.load_weights(path_to_weights)
    return image_detection_model
